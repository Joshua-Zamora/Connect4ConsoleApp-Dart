import 'View.dart';
import 'Model.dart';
import 'dart:io';

class Controller {
  ConsoleUI _console;
  WebClient _client;

  Controller() {
    this._console = new ConsoleUI();
    this._client = new WebClient();
  }

  // Creates a new game from the server url specified by the user.
  void requestGame() async {
    // Ask user for server url.
    _client.url = _console.promptServer(_client.DEFAULT_URL);

    print("Obtaining server information ......");
    // Asks user for computer's strategy and creates a game.
    _playGame(await _client.createGame(_console.promptStrategy(await _client.getStrategies())));
  }

  static int _computerMove = -1; // Keeps track of the computer last move.

  // Initalize a connect 4 game from the pid number generated by the server.
  void _playGame(var pid) async {
      _console.printBoard();
      _console.printComputerMove(_computerMove);

      stdout.write("Enter a move (1-7): ");

      var move = stdin.readLineSync();
      // Checks if move inputed by the user is accepted.
      if (move == null || (int.tryParse(move) == null) ||
         (int.parse(move) < 1 || int.parse(move) > 7)) {
        print("Invalid Move: " + move);
        _playGame(pid);
        return;
      }

      move = (int.parse(move) - 1).toString();

      var response = await _client.playMove(pid, move);
      // Inserts disc on the user's specified column and passes information to the server.
      _console.insertDisc(int.parse(response['ack_move']['slot'].toString()), 1);

      if (_endGame(response) == true) return;  // Game has ended.

      // Inserts disc on the computer specified column recieved by the server.
      _console.insertDisc(int.parse(response['move']['slot'].toString()), 2);
      _computerMove = response['move']['slot'];

      if (_endGame(response) == false) _playGame(pid);
  }

  // Steps done when the game has ended by either a win, a lost, or a draw.
  bool _endGame(var response) {
    // User won the game
    if (response['ack_move']['isWin'] == true) {
      _console.printWinnningRow(response['ack_move']['row']);

      print("You Won!");
      return true;
    }
    // User lost the game.
    else if (response['move']['isWin'] == true) {
      _console.insertDisc(int.parse(response['move']['slot'].toString()), 2);
      _console.printWinnningRow(response['move']['row']);
      _console.printComputerMove(response['move']['slot']);

      print("You lost!");
      return true;
    }
    // Its a draw.
    else if(response['move']['isDraw'] == true) {
      _console.printBoard();
      _console.printComputerMove(response['move']['slot']);

      print("No more slots, You Drawn!");
      return true;
    }
    else return false;
  }
}
